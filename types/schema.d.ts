/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Alignment =
  | "chaotic evil"
  | "chaotic good"
  | "chaotic neutral"
  | "lawful evil"
  | "lawful good"
  | "lawful neutral"
  | "neutral"
  | "neutral evil"
  | "neutral good";
export type Condition =
  | "blinded"
  | "charmed"
  | "deafened"
  | "frightened"
  | "grappled"
  | "incapacitated"
  | "invisible"
  | "paralyzed"
  | "petrified"
  | "poisoned"
  | "prone"
  | "restrained"
  | "stunned"
  | "unconscious"
  | "exhaustion";
export type Damage =
  | "acid"
  | "bludgeoning"
  | "cold"
  | "fire"
  | "force"
  | "lightning"
  | "necrotic"
  | "piercing"
  | "poison"
  | "psychic"
  | "radiant"
  | "slashing"
  | "thunder";
export type Language =
  | "abyssal"
  | "celestial"
  | "common"
  | "deep speech"
  | "draconic"
  | "druidic"
  | "dwarvish"
  | "elvish"
  | "giant"
  | "gnomish"
  | "gobling"
  | "halfling"
  | "infernal"
  | "orc"
  | "primordial"
  | "sylvan"
  | "undercommon";
export type ActionType = "melee spell attack" | "melee weapon attack" | "ranged spell attack" | "ranged weapon attack";
export type AbilityAbbreviation = "str" | "dex" | "con" | "int" | "wis" | "cha";
export type Cr =
  | "0"
  | "1/8"
  | "1/4"
  | "1/2"
  | "1"
  | "2"
  | "3"
  | "4"
  | "5"
  | "6"
  | "7"
  | "8"
  | "9"
  | "10"
  | "11"
  | "12"
  | "13"
  | "14"
  | "15"
  | "16"
  | "17"
  | "18"
  | "19"
  | "20"
  | "21"
  | "22"
  | "23"
  | "24"
  | "25"
  | "26"
  | "27"
  | "28"
  | "29"
  | "30"
  | "none";
export type CreatureType =
  | "aberration"
  | "beast"
  | "celestial"
  | "construct"
  | "dragon"
  | "elemental"
  | "fey"
  | "fiend"
  | "giant"
  | "humanoid"
  | "monstrosity"
  | "ooze"
  | "plant"
  | "undead";
export type Size = "gargantuan" | "huge" | "large" | "medium" | "small" | "tiny";
export type Armor =
  | "breastplate"
  | "chain mail"
  | "chain shirt"
  | "halfplate"
  | "heavy armor"
  | "hide"
  | "leather"
  | "light armor"
  | "medium armor"
  | "padded"
  | "plate"
  | "ring mail"
  | "scale mail"
  | "shield"
  | "spiked armor"
  | "splint"
  | "studded leather";
export type Weapon =
  | "battleaxe"
  | "blowgun"
  | "club"
  | "dagger"
  | "dart"
  | "firearms"
  | "flail"
  | "glaive"
  | "greataxe"
  | "greatclub"
  | "greatsword"
  | "halberd"
  | "handaxe"
  | "hand crossbow"
  | "heavy crossbow"
  | "javelin"
  | "lance"
  | "light crossbow"
  | "light hammer"
  | "longbow"
  | "longsword"
  | "mace"
  | "martial melee weapon"
  | "martial ranged weapon"
  | "martial weapon"
  | "maul"
  | "melee weapon"
  | "morningstar"
  | "net"
  | "pike"
  | "quarterstaff"
  | "ranged weapon"
  | "rapier"
  | "scimitar"
  | "shortbow"
  | "shortsword"
  | "sickle"
  | "simple melee weapon"
  | "simple ranged weapon"
  | "simple weapon"
  | "sling"
  | "spear"
  | "trident"
  | "war pick"
  | "warhammer"
  | "whip";

export interface Character {
  abilityScores: {
    str: AbilityScore;
    dex: AbilityScore;
    con: AbilityScore;
    int: AbilityScore;
    wis: AbilityScore;
    cha: AbilityScore;
    [k: string]: unknown;
  };
  ac: number;
  background: Background;
  biography: {
    alignment: Alignment;
    backstory: {
      entries: (List | Table | SubEntry | string)[];
      [k: string]: unknown;
    };
    bonds: string;
    flaws: string;
    gender: Gender;
    ideals: string;
    name: Name;
    personalityTraits: string;
    physicalDescription: {
      age: number;
      description: string;
      dress: string;
      eyes: string;
      hair: string;
      height: Height;
      skin: string;
      weight: Weight;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  classes: Class[];
  conditionImmunities: (Condition | string)[];
  conditionResistances: (Condition | string)[];
  conditionVulnerabilities: (Condition | string)[];
  damageImmunities: (Damage | string)[];
  damageResistances: (Damage | string)[];
  damageVulnerabilities: (Damage | string)[];
  hitPoints: HitPoints;
  initiative: number;
  inspiration: boolean;
  inventory: InventoryItem[];
  languages: (Language | string)[];
  pets: Creature[];
  proficiencies: {
    armor: (Armor | string)[];
    tool: string[];
    weapon: (Weapon | string)[];
    [k: string]: unknown;
  };
  proficiencyBonus: number;
  race: Race;
  senses: string[];
  skills: {
    acrobatics: Skill;
    animalHandling: Skill;
    arcana: Skill;
    athletics: Skill;
    deception: Skill;
    history: Skill;
    insight: Skill;
    intimidation: Skill;
    investigation: Skill;
    medicine: Skill;
    nature: Skill;
    perception: Skill;
    performance: Skill;
    persuasion: Skill;
    religion: Skill;
    sleightOfHand: Skill;
    stealth: Skill;
    survival: Skill;
    [k: string]: unknown;
  };
  speed: Speed[];
  spellSlots: number[];
  spellLists: (SpellList | SpellListWarlock)[];
  token: string;
  [k: string]: unknown;
}
export interface AbilityScore {
  mod: number;
  savingThrowProficiency: boolean;
  score: number;
  [k: string]: unknown;
}
export interface Background {
  features: Feature[];
  name: string;
  [k: string]: unknown;
}
export interface Feature {
  entries: (List | Table | SubEntry | string)[];
  name: string;
  [k: string]: unknown;
}
export interface List {
  type: "list";
  items: string[];
  [k: string]: unknown;
}
export interface Table {
  type: "table";
  caption?: string;
  columnLabels: string[];
  rows: string[][];
  [k: string]: unknown;
}
export interface SubEntry {
  entries: (List | Table | string)[];
  name: string;
  type: "subEntry";
  [k: string]: unknown;
}
export interface Gender {
  name: string;
  pronouns?: {
    objectivePronoun?: string;
    possessivePronoun?: string;
    subjectivePronoun?: string;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
export interface Name {
  first: string;
  honorific?: string;
  last?: string;
  middle?: string;
  prefix?: string;
  suffix?: string;
  title?: string;
  [k: string]: unknown;
}
export interface Height {
  firstUnit: Unit;
  secondUnit: Unit;
  [k: string]: unknown;
}
export interface Unit {
  name: string;
  indicator: string;
  value: number;
  [k: string]: unknown;
}
export interface Weight {
  name: string;
  indicator: string;
  value: number;
  [k: string]: unknown;
}
export interface Class {
  features: Feature[];
  hitDiceValue: number;
  level: number;
  name: string;
  subClass?: SubClass;
  [k: string]: unknown;
}
export interface SubClass {
  features: Feature[];
  name: string;
  [k: string]: unknown;
}
export interface HitPoints {
  current: number;
  max: number;
  temporary: number;
  [k: string]: unknown;
}
export interface InventoryItem {
  name: string;
  total: number;
  description?: string;
  [k: string]: unknown;
}
export interface Creature {
  abilityScores: {
    str: AbilityScore;
    dex: AbilityScore;
    con: AbilityScore;
    int: AbilityScore;
    wis: AbilityScore;
    cha: AbilityScore;
    [k: string]: unknown;
  };
  ac: number;
  actions: Action[];
  alignment: Alignment;
  conditionImmunities: (Condition | string)[];
  conditionResistances: (Condition | string)[];
  conditionVulnerabilities: (Condition | string)[];
  cr: Cr;
  creatureType: CreatureType;
  damageImmunities: (Damage | string)[];
  damageResistances: (Damage | string)[];
  damageVulnerabilities: (Damage | string)[];
  features: Feature[];
  hitPoints: HitPoints;
  languages: (Language | string)[];
  lairActions: Action[];
  lairActionsText: string;
  legendaryActions: Action[];
  legendaryActionsText: string;
  name: string;
  proficiencyBonus: number;
  reactions: Action[];
  regionalEffects: Action[];
  senses: string[];
  skills: {
    acrobatics: Skill;
    animalHandling: Skill;
    arcana: Skill;
    athletics: Skill;
    deception: Skill;
    history: Skill;
    insight: Skill;
    intimidation: Skill;
    investigation: Skill;
    medicine: Skill;
    nature: Skill;
    perception: Skill;
    performance: Skill;
    persuasion: Skill;
    religion: Skill;
    sleightOfHand: Skill;
    stealth: Skill;
    survival: Skill;
    [k: string]: unknown;
  };
  size: Size;
  speed: Speed[];
  spellSlots: number[];
  spellLists: (SpellList | SpellListWarlock)[];
  token: string;
  [k: string]: unknown;
}
export interface Action {
  attackType?: ActionType;
  damageFormulas?: DamageFormula[];
  entries: (List | Table | SubEntry | string)[];
  name: string;
  range?: Unit;
  reach?: Unit;
  savingThrows?: SavingThrow[];
  target?: string;
  toHit?: number;
  [k: string]: unknown;
}
export interface DamageFormula {
  average?: string;
  formula: string;
  damageType: Damage;
  [k: string]: unknown;
}
export interface SavingThrow {
  ability: AbilityAbbreviation;
  dc: number;
  [k: string]: unknown;
}
export interface Skill {
  ability: AbilityAbbreviation;
  mod: number;
  proficiency?: "none" | "proficient" | "expertise";
  [k: string]: unknown;
}
export interface Speed {
  name?: string;
  unit: string;
  value: number;
  [k: string]: unknown;
}
export interface SpellList {
  source: string;
  ability: "str" | "dex" | "con" | "int" | "wis" | "cha";
  mod: number;
  saveDc: number;
  cantrips: SpellItem[];
  first: SpellCollection;
  second: SpellCollection;
  third: SpellCollection;
  fourth: SpellCollection;
  fifth: SpellCollection;
  sixth: SpellCollection;
  seventh: SpellCollection;
  eighth: SpellCollection;
  ninth: SpellCollection;
  [k: string]: unknown;
}
export interface SpellItem {
  value: string;
  alwaysPrepared?: boolean;
  [k: string]: unknown;
}
export interface SpellCollection {
  spells: SpellItem[];
  [k: string]: unknown;
}
export interface SpellListWarlock {
  ability: AbilityAbbreviation;
  mod: number;
  saveDc: number;
  cantrips: SpellItem[];
  warlock: {
    level: number;
    spellSlots: number;
    spells: SpellItem[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Race {
  features: Feature[];
  name: string;
  size: Size;
  subrace?: {
    features: Feature[];
    name: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
